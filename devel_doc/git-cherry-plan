#!/bin/bash

PROGRAM=cherry-plan
CONFIG=cherryPlan
HEAD=$(git rev-parse --abbrev-ref HEAD)
ABBREV=$(git rev-parse --short HEAD | tr -d '\n' | wc -c)
DIR=$(git config --get $CONFIG.directory); DIR=${DIR:+$DIR/}
SUBJECT="# Rebase"
README="\
#
# Commands:
# pick <commit> = use commit
# drop <commit> = remove commit, not suitable
# noop <commit> = remove commit, already applied
#      <commit> = remove commit, not reviewed yet
#
# These lines MUST NOT be re-ordered; they are executed from top to bottom.
#
# vim:syntax=gitrebase"

usage() {
    echo "\
Usage: git $PROGRAM <command> [<args>]

Manage persistent rebase-like todo lists (\"plans\") to cherry-pick commits.

Useful for crafting larger cherry-pick batches and collaborating on them, e.g.
when preparing a stable release from a development branch.

This tool produces an equivalent of

    git rebase -i HEAD <branch>

with the following differences:

    * standalone file (can be shared, tracked in git, etc.)
    * incremental (always applies to HEAD, no rewriting of history)
    * includes already applied commits for more context (\"noop\" marker)
    * supports the empty marker (to indicate unreviewed commits)
    * optionally groups commits by logical changesets (e.g. pull requests)

Commands:
    make <branch> [<file>]
                    create plan for current branch with commits on <branch>,
                    save to <file>
    pull <branch> [<file>]
                    append new commits on <branch> to plan <file>, print them
                    on stdout
    update [<file>]
                    mark applied commits in plan <file>
    apply [<file>]  apply plan <file> to current branch

Argument defaults:
    <file>          <current-branch>.plan

Configuration:
    $CONFIG.directory
                    where to save plan <file> if unspecified, default: \$PWD
    $CONFIG.portedRegex
                    pattern to extract original commit hash from commit message
                    of ported commit, set this to mark ported commits as
                    applied
    $CONFIG.changesetCmd
                    shell command that prints changeset title (or nothing if no
                    changeset associated) from commit hash as argument, set
                    this to group and annotate commits by logical changesets
"
    exit 1
}

get_file() {
    echo ${1:-$DIR$HEAD.plan}
}

fail_exists() {
    if [ -f $1 ]; then
        echo "File $1 already exists" >&2
        exit 1
    fi
}

fail_missing() {
    if [ ! -f $1 ]; then
        echo "File $1 not found" >&2
        exit 1
    fi
}

abbrev() {
    cut -c -$ABBREV
}

log() {
    git rev-list --reverse --no-commit-header --pretty="format:     %h %s" $1
}

get_applied() {
    local pattern

    # Identical patches
    grep -f <(git rev-list $1.. | git diff-tree -p --stdin | \
              git patch-id | cut -d' ' -f1) \
            <(git rev-list ..$1 | git diff-tree -p --stdin | \
              git patch-id) | cut -d' ' -f2

    # Ported patches
    pattern=$(git config --get $CONFIG.portedRegex) || return
    git rev-list --pretty="format:%b" $1.. | sed -n "s/$pattern/\1/p"
}

mark() {
    get_applied $1 | while read line; do
        sed -i "s/^.....\($(echo $line | abbrev)\)/noop \1/" $2
    done
}

subject() {
    local head=$(git rev-parse HEAD | abbrev)
    local range=$head..$(get_last $1)
    local count=$(git rev-list --count $range)
    local text="$SUBJECT $range onto $head ($count commands)"

    if grep -q "^$SUBJECT" $1; then
        sed -i "s/^$SUBJECT .*\$/$text/" $1
    else
        echo $text >> $1
    fi
}

get_hash() {
    sed 's/^.....//' | cut -d' ' -f1
}

get_last() {
    sed '/^#/d; /^$/d' $1 | tail -1 | get_hash
}

get_line() {
    grep -n "^.....$2 " $1 | cut -d: -f1
}

get_branch() {
    sed -n "s/^$SUBJECT .*\.\.\(.*\) onto .*\$/\1/p" $1
}

annotate() {
    local cmd
    local file=$1
    local from=${2-1}

    local lnum=0
    local cnum=0
    local lcnum=0
    local setnum=0
    local setbeg=0

    local commit
    local title
    local ltitle

    cmd=$(git config --get $CONFIG.changesetCmd) || return
    cat $file | while IFS= read line; do
        let "lnum++"
        [[ $lnum -lt $from || -z $line || $line = \#* ]] && continue

        let "cnum++"
        commit=$(echo "$line" | get_hash)
        title=$($cmd $commit | head -n1)
        [ -z "$title" ] && title=$commit
        [ "$title" == "$ltitle" ] && continue

        # Pad the changeset that just ended (except if single-commit)
        if [ $cnum -gt 1 ]; then
            if [[ $lcnum == 1 && $setnum -gt 1 ]]; then
                sed -i "${setbeg}i \\\\" $file
                let "lnum++,setbeg++"
            fi
            sed -i "${setbeg}i # $ltitle" $file; let "lnum++"
            sed -i "${lnum}i \\\\" $file; let "lnum++"
        fi

        let "setnum++"
        setbeg=$lnum
        ltitle=$title
        lcnum=$cnum
        cnum=0
    done
}

CMD=$1; shift
case $CMD in
    make)
        [ "$#" -lt 1 ] && usage
        branch=$1
        file=$(get_file $2)
        fail_exists $file

        log HEAD..$branch > $file
        mark $branch $file
        annotate $file

        echo >> $file
        subject $file
        echo "$README" >> $file
        echo $file
    ;;
    pull)
        [ "$#" -lt 1 ] && usage
        branch=$1
        file=$(get_file $2)
        fail_missing $file
        last=$(get_last $file)
        lnum=$(get_line $file $last)
        new=$(log $last..$branch)

        [ -z "$new" ] && exit

        echo "$new" | sed -i "${lnum}r /dev/stdin" $file
        sed -i "$(( lnum + 1 ))i \\\n#### Pulled $(date +%D) ####" $file
        annotate $file $(( lnum + 2 ))
        subject $file

        echo "$new"
    ;;
    update)
        file=$(get_file $1)
        fail_missing $file
        branch=$(get_branch $file)

        mark $branch $file
        subject $file
    ;;
    apply)
        file=$(get_file $1)
        fail_missing $file
        grep '^pick ' $file | get_hash | xargs git cherry-pick -x
    ;;
    *)
        usage
    ;;
esac
